Para as questões 2 a 5, considere que as variáveis f, g, h, i e j são do tipo inteiro (16 bits na arquitetura do MSP430), e que o vetor A[] é do tipo inteiro. Estas variáveis estão armazenadas nos seguintes registradores: f: R4 g: R5 h: R6 i: R7 j: R8 A: R9 Utilize os registradores R11, R12, R13, R14 e R15 para armazenar valores temporários.

1. Escreva os trechos de código assembly do MSP430 para: 
(a) Somente setar o bit menos significativo de R5. 
    mov.w #1,R15
    bis.w R15,R5 ; Op OR força bits a serem setados
    
(b) Somente setar dois bits de R6: o menos significativo e o segundo menos significativo. 
    mov.w #3,R14
    bis.w R14,R5  
    
(c) Somente zerar o terceiro bit menos significativo de R7. 
    mov.w #4,R13
    bic.w R13,R7 ; Realiza and com o inverso. bic usa 1 p/ selecionar quais bits zerar
    
(d) Somente zerar o terceiro e o quarto bits menos significativo de R8. 
    mov.w #12,R12
    bic.w R12,R8
    
(e) Somente inverter o bit mais significativo de R9. 
    mov.w 0x8000, R11
    xor.w R11,R9 ; xor usa 1 para forçar bits a serem invertidos
    
(f) Inverter o nibble mais significativo de R10, e setar o nibble menos significativo de R10.
     mov.w 0xF000,R15
     bic.w R15,R10
     mov.w #15,R14
     bis.w R14,R10.
     
2. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

if(i>j) f = g+h+10;
else f = g-h-10;

    cmp R8,R7;      i(R7)>j(R8)? 
    jl ELSE  ;      se R7 for menor pule Else
    mov.w R5,R11
    add.w R6,R11
    add.w #10,R11
    mov.w R11,R4
    jmp EXIT
    ELSE:
    mov.w R5,R11
    sub.w R6,R11
    sub.w #10,R11
    mov.w R11,R4
    EXIT

3. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

while(save[i]!=k) i++;

LOOP:
mov.w R7, R12       ; R12 = i
rla R12             ;  2*i
add.w R10, R12      ; k+2i
cmp 0(R12), R11     ;
jeq EXIT            ; se for igual pula pra EXIT
inc.w R7
jmp LOOP
EXIT

4. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

for(i=0; i<100; i++) A[i] = i*2;

mov.w #0, R7
LOOP:
mov.w R7, R12
cmp.w R12, #100
jqe EXIT             ; se for igual pula para EXIT
inc.w R7
jmp LOOP
FIM


5. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

for(i=99; i>=0; i--) A[i] = i*2;

mov.w #99, R7
LOOP
mov.w R7,R12
cmp R12, #0
jqe EXIT
dec.w R7
jmp LOOP
EXIT
